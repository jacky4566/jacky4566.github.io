{"ast":null,"code":"import { PLACEMENT_TYPE_HERO, PLACEMENT_TYPE_GOAL, PLACEMENT_TYPE_WALL, PLACEMENT_TYPE_FLOUR, PLACEMENT_TYPE_CELEBRATION, PLACEMENT_TYPE_LOCK, PLACEMENT_TYPE_KEY, PLACEMENT_TYPE_WATER } from \"../helpers/consts\";\nimport { HeroPlacement } from \"../game-objects/HeroPlacement\";\nimport { GoalPlacement } from \"../game-objects/GoalPlacement\";\nimport { WallPlacement } from \"../game-objects/WallPlacement\";\nimport { FlourPlacement } from \"../game-objects/FlourPlacement\";\nimport { CelebrationPlacement } from \"../game-objects/CelebrationPlacement\";\nimport { LockPlacement } from \"../game-objects/LockPlacement\";\nimport { KeyPlacement } from \"../game-objects/KeyPlacement\";\nimport { WaterPlacement } from \"../game-objects/WaterPlacement\";\nconst placementTypeClassMap = {\n  [PLACEMENT_TYPE_HERO]: HeroPlacement,\n  [PLACEMENT_TYPE_GOAL]: GoalPlacement,\n  [PLACEMENT_TYPE_WALL]: WallPlacement,\n  [PLACEMENT_TYPE_FLOUR]: FlourPlacement,\n  [PLACEMENT_TYPE_CELEBRATION]: CelebrationPlacement,\n  [PLACEMENT_TYPE_LOCK]: LockPlacement,\n  [PLACEMENT_TYPE_KEY]: KeyPlacement,\n  [PLACEMENT_TYPE_WATER]: WaterPlacement,\n  [PLACEMENT_TYPE_WATER_PICKUP]: WaterPickupPlacement\n};\nclass PlacementFactory {\n  createPlacement(config, level) {\n    const placementClass = placementTypeClassMap[config.type];\n    if (!placementClass) {\n      console.warn(\"NO TYPE FOUND\", config.type);\n    }\n    // Generate a new instance with random ID\n    const instance = new placementClass(config, level);\n    instance.id = Math.floor(Math.random() * 9999999) + 1;\n    return instance;\n  }\n}\nexport const placementFactory = new PlacementFactory();","map":{"version":3,"names":["PLACEMENT_TYPE_HERO","PLACEMENT_TYPE_GOAL","PLACEMENT_TYPE_WALL","PLACEMENT_TYPE_FLOUR","PLACEMENT_TYPE_CELEBRATION","PLACEMENT_TYPE_LOCK","PLACEMENT_TYPE_KEY","PLACEMENT_TYPE_WATER","HeroPlacement","GoalPlacement","WallPlacement","FlourPlacement","CelebrationPlacement","LockPlacement","KeyPlacement","WaterPlacement","placementTypeClassMap","PLACEMENT_TYPE_WATER_PICKUP","WaterPickupPlacement","PlacementFactory","createPlacement","config","level","placementClass","type","console","warn","instance","id","Math","floor","random","placementFactory"],"sources":["C:/GitHub/AthabascaCPSCI/COMP 486/Mineral Mayhem/src/classes/PlacementFactory.js"],"sourcesContent":["import {\r\n  PLACEMENT_TYPE_HERO,\r\n  PLACEMENT_TYPE_GOAL,\r\n  PLACEMENT_TYPE_WALL,\r\n  PLACEMENT_TYPE_FLOUR,\r\n  PLACEMENT_TYPE_CELEBRATION,\r\n  PLACEMENT_TYPE_LOCK,\r\n  PLACEMENT_TYPE_KEY,\r\n  PLACEMENT_TYPE_WATER,\r\n} from \"../helpers/consts\";\r\nimport { HeroPlacement } from \"../game-objects/HeroPlacement\";\r\nimport { GoalPlacement } from \"../game-objects/GoalPlacement\";\r\nimport { WallPlacement } from \"../game-objects/WallPlacement\";\r\nimport { FlourPlacement } from \"../game-objects/FlourPlacement\";\r\nimport { CelebrationPlacement } from \"../game-objects/CelebrationPlacement\";\r\nimport { LockPlacement } from \"../game-objects/LockPlacement\";\r\nimport { KeyPlacement } from \"../game-objects/KeyPlacement\";\r\nimport { WaterPlacement } from \"../game-objects/WaterPlacement\";\r\n\r\nconst placementTypeClassMap = {\r\n  [PLACEMENT_TYPE_HERO]: HeroPlacement,\r\n  [PLACEMENT_TYPE_GOAL]: GoalPlacement,\r\n  [PLACEMENT_TYPE_WALL]: WallPlacement,\r\n  [PLACEMENT_TYPE_FLOUR]: FlourPlacement,\r\n  [PLACEMENT_TYPE_CELEBRATION]: CelebrationPlacement,\r\n  [PLACEMENT_TYPE_LOCK]: LockPlacement,\r\n  [PLACEMENT_TYPE_KEY]: KeyPlacement,\r\n  [PLACEMENT_TYPE_WATER]: WaterPlacement,\r\n  [PLACEMENT_TYPE_WATER_PICKUP]: WaterPickupPlacement,\r\n};\r\n\r\nclass PlacementFactory {\r\n  createPlacement(config, level) {\r\n    const placementClass = placementTypeClassMap[config.type];\r\n    if (!placementClass) {\r\n      console.warn(\"NO TYPE FOUND\", config.type);\r\n    }\r\n    // Generate a new instance with random ID\r\n    const instance = new placementClass(config, level);\r\n    instance.id = Math.floor(Math.random() * 9999999) + 1;\r\n    return instance;\r\n  }\r\n}\r\n\r\nexport const placementFactory = new PlacementFactory();"],"mappings":"AAAA,SACEA,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,oBAAoB,EACpBC,0BAA0B,EAC1BC,mBAAmB,EACnBC,kBAAkB,EAClBC,oBAAoB,QACf,mBAAmB;AAC1B,SAASC,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,cAAc,QAAQ,gCAAgC;AAC/D,SAASC,oBAAoB,QAAQ,sCAAsC;AAC3E,SAASC,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,cAAc,QAAQ,gCAAgC;AAE/D,MAAMC,qBAAqB,GAAG;EAC5B,CAAChB,mBAAmB,GAAGQ,aAAa;EACpC,CAACP,mBAAmB,GAAGQ,aAAa;EACpC,CAACP,mBAAmB,GAAGQ,aAAa;EACpC,CAACP,oBAAoB,GAAGQ,cAAc;EACtC,CAACP,0BAA0B,GAAGQ,oBAAoB;EAClD,CAACP,mBAAmB,GAAGQ,aAAa;EACpC,CAACP,kBAAkB,GAAGQ,YAAY;EAClC,CAACP,oBAAoB,GAAGQ,cAAc;EACtC,CAACE,2BAA2B,GAAGC;AACjC,CAAC;AAED,MAAMC,gBAAgB,CAAC;EACrBC,eAAeA,CAACC,MAAM,EAAEC,KAAK,EAAE;IAC7B,MAAMC,cAAc,GAAGP,qBAAqB,CAACK,MAAM,CAACG,IAAI,CAAC;IACzD,IAAI,CAACD,cAAc,EAAE;MACnBE,OAAO,CAACC,IAAI,CAAC,eAAe,EAAEL,MAAM,CAACG,IAAI,CAAC;IAC5C;IACA;IACA,MAAMG,QAAQ,GAAG,IAAIJ,cAAc,CAACF,MAAM,EAAEC,KAAK,CAAC;IAClDK,QAAQ,CAACC,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;IACrD,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,MAAMK,gBAAgB,GAAG,IAAIb,gBAAgB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}