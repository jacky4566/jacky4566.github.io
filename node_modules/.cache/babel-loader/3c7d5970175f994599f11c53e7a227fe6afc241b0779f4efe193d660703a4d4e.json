{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\AthabascaCPSCI\\\\COMP 486\\\\Mineral Mayhem\\\\mineralmayhem\\\\src\\\\components\\\\object-graphics\\\\Sprite.js\",\n  _s = $RefreshSig$();\n/*\r\nThis dedicated function allows us to grab a sprite from the sprite sheet and draw it to our canvas as defined in the parent HTML.\r\nWe use a memo function to reduce the number of re-draws to only when the input parameters change for changing sprites.\r\nCode was written with the help of this tutorial https://www.coopmode.dev/series/ciabattas-revenge/\r\n\r\nJackson Wiebe \r\n3519635\r\n09/10/2023\r\n*/\n\nimport React from \"react\";\nimport { useEffect, useRef } from \"react\";\nimport { CELL_SIZE } from \"../../helpers/consts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Sprite({\n  image,\n  frameCoord,\n  size = 16\n}) {\n  _s();\n  const canvasRef = useRef();\n  useEffect(() => {\n    /** @type {HTMLCanvasElement} */\n    const canvasEl = canvasRef.current;\n    const ctx = canvasEl.getContext(\"2d\");\n\n    //Clear out anything in the canvas tag\n    ctx.clearRect(0, 0, canvasEl.width, canvasEl.height);\n\n    //Draw a graphic to the canvas tag\n    const tileSheetX = Number(frameCoord.split(\"x\")[0]); //Using a string frameCoord, here is easier than an array or fancier data block\n    const tileSheetY = Number(frameCoord.split(\"x\")[1]);\n    ctx.drawImage(image,\n    // Image to pull from\n    tileSheetX * CELL_SIZE,\n    // Left X corner of frame\n    tileSheetY * CELL_SIZE,\n    // Top Y corner of frame\n    size,\n    //How much to crop from the sprite sheet (X)\n    size,\n    //How much to crop from the sprite sheet (Y)\n    0,\n    //Where to place this on canvas tag X (0)\n    0,\n    //Where to place this on canvas tag Y (0)\n    size,\n    //How large to scale it (X)\n    size //How large to scale it (Y)\n    );\n  }, [image, frameCoord, size]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    width: size,\n    height: size,\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 12\n  }, this);\n}\n_s(Sprite, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Sprite;\nconst MemoizedSprite = /*#__PURE__*/React.memo(Sprite); //Allows us to return a saved sprite unless the input parameters change\n_c2 = MemoizedSprite;\nexport default MemoizedSprite;\nvar _c, _c2;\n$RefreshReg$(_c, \"Sprite\");\n$RefreshReg$(_c2, \"MemoizedSprite\");","map":{"version":3,"names":["React","useEffect","useRef","CELL_SIZE","jsxDEV","_jsxDEV","Sprite","image","frameCoord","size","_s","canvasRef","canvasEl","current","ctx","getContext","clearRect","width","height","tileSheetX","Number","split","tileSheetY","drawImage","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","MemoizedSprite","memo","_c2","$RefreshReg$"],"sources":["C:/GitHub/AthabascaCPSCI/COMP 486/Mineral Mayhem/mineralmayhem/src/components/object-graphics/Sprite.js"],"sourcesContent":["/*\r\nThis dedicated function allows us to grab a sprite from the sprite sheet and draw it to our canvas as defined in the parent HTML.\r\nWe use a memo function to reduce the number of re-draws to only when the input parameters change for changing sprites.\r\nCode was written with the help of this tutorial https://www.coopmode.dev/series/ciabattas-revenge/\r\n\r\nJackson Wiebe \r\n3519635\r\n09/10/2023\r\n*/\r\n\r\nimport React from \"react\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { CELL_SIZE } from \"../../helpers/consts\";\r\n\r\nfunction Sprite({ image, frameCoord, size = 16 }) {\r\n    const canvasRef = useRef();\r\n    useEffect(() => {\r\n        /** @type {HTMLCanvasElement} */\r\n        const canvasEl = canvasRef.current;\r\n        const ctx = canvasEl.getContext(\"2d\");\r\n\r\n        //Clear out anything in the canvas tag\r\n        ctx.clearRect(0, 0, canvasEl.width, canvasEl.height);\r\n\r\n        //Draw a graphic to the canvas tag\r\n        const tileSheetX = Number(frameCoord.split(\"x\")[0]); //Using a string frameCoord, here is easier than an array or fancier data block\r\n        const tileSheetY = Number(frameCoord.split(\"x\")[1]);\r\n\r\n        ctx.drawImage(\r\n            image, // Image to pull from\r\n            tileSheetX * CELL_SIZE, // Left X corner of frame\r\n            tileSheetY * CELL_SIZE, // Top Y corner of frame\r\n            size, //How much to crop from the sprite sheet (X)\r\n            size, //How much to crop from the sprite sheet (Y)\r\n            0, //Where to place this on canvas tag X (0)\r\n            0, //Where to place this on canvas tag Y (0)\r\n            size, //How large to scale it (X)\r\n            size //How large to scale it (Y)\r\n        );\r\n    }, [image, frameCoord, size]);\r\n\r\n    return <canvas width={size} height={size} ref={canvasRef} />;\r\n}\r\n\r\nconst MemoizedSprite = React.memo(Sprite); //Allows us to return a saved sprite unless the input parameters change\r\nexport default MemoizedSprite;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,SAAS,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,MAAMA,CAAC;EAAEC,KAAK;EAAEC,UAAU;EAAEC,IAAI,GAAG;AAAG,CAAC,EAAE;EAAAC,EAAA;EAC9C,MAAMC,SAAS,GAAGT,MAAM,CAAC,CAAC;EAC1BD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMW,QAAQ,GAAGD,SAAS,CAACE,OAAO;IAClC,MAAMC,GAAG,GAAGF,QAAQ,CAACG,UAAU,CAAC,IAAI,CAAC;;IAErC;IACAD,GAAG,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEJ,QAAQ,CAACK,KAAK,EAAEL,QAAQ,CAACM,MAAM,CAAC;;IAEpD;IACA,MAAMC,UAAU,GAAGC,MAAM,CAACZ,UAAU,CAACa,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,MAAMC,UAAU,GAAGF,MAAM,CAACZ,UAAU,CAACa,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAEnDP,GAAG,CAACS,SAAS,CACThB,KAAK;IAAE;IACPY,UAAU,GAAGhB,SAAS;IAAE;IACxBmB,UAAU,GAAGnB,SAAS;IAAE;IACxBM,IAAI;IAAE;IACNA,IAAI;IAAE;IACN,CAAC;IAAE;IACH,CAAC;IAAE;IACHA,IAAI;IAAE;IACNA,IAAI,CAAC;IACT,CAAC;EACL,CAAC,EAAE,CAACF,KAAK,EAAEC,UAAU,EAAEC,IAAI,CAAC,CAAC;EAE7B,oBAAOJ,OAAA;IAAQY,KAAK,EAAER,IAAK;IAACS,MAAM,EAAET,IAAK;IAACe,GAAG,EAAEb;EAAU;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChE;AAAClB,EAAA,CA5BQJ,MAAM;AAAAuB,EAAA,GAANvB,MAAM;AA8Bf,MAAMwB,cAAc,gBAAG9B,KAAK,CAAC+B,IAAI,CAACzB,MAAM,CAAC,CAAC,CAAC;AAAA0B,GAAA,GAArCF,cAAc;AACpB,eAAeA,cAAc;AAAC,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}