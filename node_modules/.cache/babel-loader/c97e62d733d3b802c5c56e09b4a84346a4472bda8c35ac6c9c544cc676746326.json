{"ast":null,"code":"import { LEVEL_THEMES, PLACEMENT_TYPE_FLOUR, PLACEMENT_TYPE_GOAL, PLACEMENT_TYPE_HERO, PLACEMENT_TYPE_WATER, PLACEMENT_TYPE_WATER_PICKUP } from \"../../helpers/consts\";\nfunction getRandom(odds) {\n  let probability = 1 / odds;\n  console.log(probability);\n  console.log(Math.random() < probability);\n  return Math.random() < probability;\n}\nfunction isItemExistsAtPosition(placements, x, y) {\n  return placements.some(item => item.x === x && item.y === y);\n}\nexport default function LevelRNG(level) {\n  /* Add RNG items to level */\n  level.RNG.forEach(item => {\n    for (let y = item.depthStart; y <= item.depthEnd; y++) {\n      for (let x = 1; x <= level.tilesWidth; x++) {\n        /* Check if space is already taken and the odds say we can place */\n        if (!isItemExistsAtPosition(level.placements, x, y)) {\n          /* Does the odds determine placement */\n          if (getRandom(item.odds)) {\n            const newPlacement = {\n              x: x,\n              y: y,\n              type: item.type\n            };\n            level.placements.push(newPlacement);\n          }\n        }\n\n        //console.log(getRandom(item.odds));\n        // Do something with the x and y coordinates\n        //console.log(`x: ${x}, y: ${y}`);\n      }\n    }\n  });\n\n  //const newPlacement = { x: 7, y: 2, type: PLACEMENT_TYPE_WATER };\n  //level.placements.push(newPlacement);\n\n  return level.placements;\n}\n_c = LevelRNG;\nvar _c;\n$RefreshReg$(_c, \"LevelRNG\");","map":{"version":3,"names":["LEVEL_THEMES","PLACEMENT_TYPE_FLOUR","PLACEMENT_TYPE_GOAL","PLACEMENT_TYPE_HERO","PLACEMENT_TYPE_WATER","PLACEMENT_TYPE_WATER_PICKUP","getRandom","odds","probability","console","log","Math","random","isItemExistsAtPosition","placements","x","y","some","item","LevelRNG","level","RNG","forEach","depthStart","depthEnd","tilesWidth","newPlacement","type","push","_c","$RefreshReg$"],"sources":["C:/GitHub/AthabascaCPSCI/COMP 486/Mineral Mayhem/src/components/level-layout/LevelRNG.js"],"sourcesContent":["import {\r\n    LEVEL_THEMES,\r\n    PLACEMENT_TYPE_FLOUR,\r\n    PLACEMENT_TYPE_GOAL,\r\n    PLACEMENT_TYPE_HERO,\r\n    PLACEMENT_TYPE_WATER,\r\n    PLACEMENT_TYPE_WATER_PICKUP,\r\n} from \"../../helpers/consts\";\r\n\r\nfunction getRandom(odds) {\r\n    let probability = 1 / odds;\r\n    console.log(probability);\r\n    console.log(Math.random() < probability);\r\n    return Math.random() < probability;\r\n}\r\n\r\nfunction isItemExistsAtPosition(placements, x, y) {\r\n    return placements.some(item => item.x === x && item.y === y);\r\n  }\r\n\r\nexport default function LevelRNG(level) {\r\n    /* Add RNG items to level */\r\n    level.RNG.forEach((item) => {\r\n        for (let y = item.depthStart; y <= item.depthEnd; y++) {\r\n            for (let x = 1; x <= level.tilesWidth; x++) {\r\n                /* Check if space is already taken and the odds say we can place */\r\n                if (!isItemExistsAtPosition(level.placements, x, y)){\r\n                    /* Does the odds determine placement */\r\n                    if (getRandom(item.odds)){\r\n                        const newPlacement = { x: x, y: y, type: item.type };\r\n                        level.placements.push(newPlacement);\r\n                    }\r\n                        \r\n                }\r\n\r\n                //console.log(getRandom(item.odds));\r\n                // Do something with the x and y coordinates\r\n                //console.log(`x: ${x}, y: ${y}`);\r\n            }\r\n        }\r\n    });\r\n\r\n    //const newPlacement = { x: 7, y: 2, type: PLACEMENT_TYPE_WATER };\r\n    //level.placements.push(newPlacement);\r\n\r\n    return level.placements;\r\n}"],"mappings":"AAAA,SACIA,YAAY,EACZC,oBAAoB,EACpBC,mBAAmB,EACnBC,mBAAmB,EACnBC,oBAAoB,EACpBC,2BAA2B,QACxB,sBAAsB;AAE7B,SAASC,SAASA,CAACC,IAAI,EAAE;EACrB,IAAIC,WAAW,GAAG,CAAC,GAAGD,IAAI;EAC1BE,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;EACxBC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGJ,WAAW,CAAC;EACxC,OAAOG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGJ,WAAW;AACtC;AAEA,SAASK,sBAAsBA,CAACC,UAAU,EAAEC,CAAC,EAAEC,CAAC,EAAE;EAC9C,OAAOF,UAAU,CAACG,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,CAAC,KAAKA,CAAC,IAAIG,IAAI,CAACF,CAAC,KAAKA,CAAC,CAAC;AAC9D;AAEF,eAAe,SAASG,QAAQA,CAACC,KAAK,EAAE;EACpC;EACAA,KAAK,CAACC,GAAG,CAACC,OAAO,CAAEJ,IAAI,IAAK;IACxB,KAAK,IAAIF,CAAC,GAAGE,IAAI,CAACK,UAAU,EAAEP,CAAC,IAAIE,IAAI,CAACM,QAAQ,EAAER,CAAC,EAAE,EAAE;MACnD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIK,KAAK,CAACK,UAAU,EAAEV,CAAC,EAAE,EAAE;QACxC;QACA,IAAI,CAACF,sBAAsB,CAACO,KAAK,CAACN,UAAU,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAC;UAChD;UACA,IAAIV,SAAS,CAACY,IAAI,CAACX,IAAI,CAAC,EAAC;YACrB,MAAMmB,YAAY,GAAG;cAAEX,CAAC,EAAEA,CAAC;cAAEC,CAAC,EAAEA,CAAC;cAAEW,IAAI,EAAET,IAAI,CAACS;YAAK,CAAC;YACpDP,KAAK,CAACN,UAAU,CAACc,IAAI,CAACF,YAAY,CAAC;UACvC;QAEJ;;QAEA;QACA;QACA;MACJ;IACJ;EACJ,CAAC,CAAC;;EAEF;EACA;;EAEA,OAAON,KAAK,CAACN,UAAU;AAC3B;AAACe,EAAA,GA1BuBV,QAAQ;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}