{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\AthabascaCPSCI\\\\COMP 486\\\\Mineral Mayhem\\\\src\\\\game-objects\\\\HeroPlacement.js\";\nimport { Placement } from \"./Placement\";\nimport Hero from \"../components/object-graphics/Hero\";\nimport { DIRECTION_LEFT, DIRECTION_RIGHT, directionUpdateMap, BODY_SKINS, HERO_RUN_1, HERO_RUN_2, Z_INDEX_LAYER_SIZE, PLACEMENT_TYPE_CELEBRATION } from \"../helpers/consts\";\nimport { TILES } from \"../helpers/tiles\";\nimport { Collision } from \"../classes/Collision\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst heroSkinMap = {\n  [BODY_SKINS.NORMAL]: [TILES.HERO_LEFT, TILES.HERO_RIGHT],\n  [BODY_SKINS.WATER]: [TILES.HERO_WATER_LEFT, TILES.HERO_WATER_RIGHT],\n  [HERO_RUN_1]: [TILES.HERO_RUN_1_LEFT, TILES.HERO_RUN_1_RIGHT],\n  [HERO_RUN_2]: [TILES.HERO_RUN_2_LEFT, TILES.HERO_RUN_2_RIGHT],\n  [BODY_SKINS.DEATH]: [TILES.HERO_DEATH_LEFT, TILES.HERO_DEATH_RIGHT]\n};\nexport class HeroPlacement extends Placement {\n  controllerMoveRequested(direction) {\n    //Attempt to start moving\n    if (this.movingPixelsRemaining > 0) {\n      return;\n    }\n\n    // Check for lock at next position\n    const possibleLock = this.getLockAtNextPosition(direction);\n    if (possibleLock) {\n      possibleLock.unlock();\n      return;\n    }\n\n    //Make sure the next space is available\n    if (this.isSolidAtNextPosition(direction)) {\n      return;\n    }\n\n    // Maybe hop out of non-normal skin\n    const collision = this.getCollisionAtNextPosition(direction);\n    if (!collision.withChangesHeroSkin()) {\n      this.skin = BODY_SKINS.NORMAL;\n    }\n\n    //Start the move\n    this.movingPixelsRemaining = 16;\n    this.movingPixelDirection = direction;\n    this.updateFacingDirection();\n    this.updateWalkFrame();\n  }\n  getCollisionAtNextPosition(direction) {\n    const {\n      x,\n      y\n    } = directionUpdateMap[direction];\n    const nextX = this.x + x;\n    const nextY = this.y + y;\n    return new Collision(this, this.level, {\n      x: nextX,\n      y: nextY\n    });\n  }\n  getLockAtNextPosition(direction) {\n    const collision = this.getCollisionAtNextPosition(direction);\n    return collision.withLock();\n  }\n  isSolidAtNextPosition(direction) {\n    const collision = this.getCollisionAtNextPosition(direction);\n    const isOutOfBounds = this.level.isPositionOutOfBounds(collision.x, collision.y);\n    if (isOutOfBounds) {\n      return true;\n    }\n    return Boolean(collision.withSolidPlacement());\n  }\n  updateFacingDirection() {\n    if (this.movingPixelDirection === DIRECTION_LEFT || this.movingPixelDirection === DIRECTION_RIGHT) {\n      this.spriteFacingDirection = this.movingPixelDirection;\n    }\n  }\n  updateWalkFrame() {\n    this.spriteWalkFrame = this.spriteWalkFrame === 1 ? 0 : 1;\n  }\n  tick() {\n    this.tickMovingPixelProgress();\n  }\n  onDoneMoving() {\n    //Update my x/y!\n    const {\n      x,\n      y\n    } = directionUpdateMap[this.movingPixelDirection];\n    this.x += x;\n    this.y += y;\n    this.handleCollisions();\n  }\n  handleCollisions() {\n    // handle collisions!\n    const collision = new Collision(this, this.level);\n    this.skin = BODY_SKINS.NORMAL;\n    const changesHeroSkin = collision.withChangesHeroSkin();\n    if (changesHeroSkin) {\n      this.skin = changesHeroSkin.changesHeroSkinOnCollide();\n    }\n    const collideThatAddsToInventory = collision.withPlacementAddsToInventory();\n    if (collideThatAddsToInventory) {\n      collideThatAddsToInventory.collect();\n      this.level.addPlacement({\n        type: PLACEMENT_TYPE_CELEBRATION,\n        x: this.x,\n        y: this.y\n      });\n    }\n    const takesDamages = collision.withSelfGetsDamaged();\n    if (takesDamages) {\n      this.level.setDeathOutcome(takesDamages.type);\n    }\n    const completesLevel = collision.withCompletesLevel();\n    if (completesLevel) {\n      this.level.completeLevel();\n    }\n  }\n  getFrame() {\n    //Which frame to show?\n    const index = this.spriteFacingDirection === DIRECTION_LEFT ? 0 : 1;\n\n    // If dead, show the dead skin\n    if (this.level.deathOutcome) {\n      return heroSkinMap[BODY_SKINS.DEATH][index];\n    }\n\n    //Use correct walking frame per direction\n    if (this.movingPixelsRemaining > 0 && this.skin === BODY_SKINS.NORMAL) {\n      const walkKey = this.spriteWalkFrame === 0 ? HERO_RUN_1 : HERO_RUN_2;\n      return heroSkinMap[walkKey][index];\n    }\n    return heroSkinMap[this.skin][index];\n  }\n  getYTranslate() {\n    // Stand on ground when not moving\n    if (this.movingPixelsRemaining === 0 || this.skin !== BODY_SKINS.NORMAL) {\n      return 0;\n    }\n\n    //Elevate ramp up or down at beginning/end of movement\n    const PIXELS_FROM_END = 2;\n    if (this.movingPixelsRemaining < PIXELS_FROM_END || this.movingPixelsRemaining > 16 - PIXELS_FROM_END) {\n      return -1;\n    }\n\n    // Highest in the middle of the movement\n    return -2;\n  }\n  tickMovingPixelProgress() {\n    if (this.movingPixelsRemaining === 0) {\n      return;\n    }\n    this.movingPixelsRemaining -= this.travelPixelsPerFrame;\n    if (this.movingPixelsRemaining <= 0) {\n      this.movingPixelsRemaining = 0;\n      this.onDoneMoving();\n    }\n  }\n  zIndex() {\n    return this.y * Z_INDEX_LAYER_SIZE + 1;\n  }\n  renderComponent() {\n    const showShadow = this.skin !== BODY_SKINS.WATER;\n    return /*#__PURE__*/_jsxDEV(Hero, {\n      frameCoord: this.getFrame(),\n      yTranslate: this.getYTranslate(),\n      showShadow: showShadow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["Placement","Hero","DIRECTION_LEFT","DIRECTION_RIGHT","directionUpdateMap","BODY_SKINS","HERO_RUN_1","HERO_RUN_2","Z_INDEX_LAYER_SIZE","PLACEMENT_TYPE_CELEBRATION","TILES","Collision","jsxDEV","_jsxDEV","heroSkinMap","NORMAL","HERO_LEFT","HERO_RIGHT","WATER","HERO_WATER_LEFT","HERO_WATER_RIGHT","HERO_RUN_1_LEFT","HERO_RUN_1_RIGHT","HERO_RUN_2_LEFT","HERO_RUN_2_RIGHT","DEATH","HERO_DEATH_LEFT","HERO_DEATH_RIGHT","HeroPlacement","controllerMoveRequested","direction","movingPixelsRemaining","possibleLock","getLockAtNextPosition","unlock","isSolidAtNextPosition","collision","getCollisionAtNextPosition","withChangesHeroSkin","skin","movingPixelDirection","updateFacingDirection","updateWalkFrame","x","y","nextX","nextY","level","withLock","isOutOfBounds","isPositionOutOfBounds","Boolean","withSolidPlacement","spriteFacingDirection","spriteWalkFrame","tick","tickMovingPixelProgress","onDoneMoving","handleCollisions","changesHeroSkin","changesHeroSkinOnCollide","collideThatAddsToInventory","withPlacementAddsToInventory","collect","addPlacement","type","takesDamages","withSelfGetsDamaged","setDeathOutcome","completesLevel","withCompletesLevel","completeLevel","getFrame","index","deathOutcome","walkKey","getYTranslate","PIXELS_FROM_END","travelPixelsPerFrame","zIndex","renderComponent","showShadow","frameCoord","yTranslate","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/GitHub/AthabascaCPSCI/COMP 486/Mineral Mayhem/src/game-objects/HeroPlacement.js"],"sourcesContent":["import { Placement } from \"./Placement\";\r\nimport Hero from \"../components/object-graphics/Hero\";\r\nimport {\r\n  DIRECTION_LEFT,\r\n  DIRECTION_RIGHT,\r\n  directionUpdateMap,\r\n  BODY_SKINS,\r\n  HERO_RUN_1,\r\n  HERO_RUN_2,\r\n  Z_INDEX_LAYER_SIZE,\r\n  PLACEMENT_TYPE_CELEBRATION,\r\n} from \"../helpers/consts\";\r\nimport { TILES } from \"../helpers/tiles\";\r\nimport { Collision } from \"../classes/Collision\";\r\n\r\nconst heroSkinMap = {\r\n  [BODY_SKINS.NORMAL]: [TILES.HERO_LEFT, TILES.HERO_RIGHT],\r\n  [BODY_SKINS.WATER]: [TILES.HERO_WATER_LEFT, TILES.HERO_WATER_RIGHT],\r\n  [HERO_RUN_1]: [TILES.HERO_RUN_1_LEFT, TILES.HERO_RUN_1_RIGHT],\r\n  [HERO_RUN_2]: [TILES.HERO_RUN_2_LEFT, TILES.HERO_RUN_2_RIGHT],\r\n  [BODY_SKINS.DEATH]: [TILES.HERO_DEATH_LEFT, TILES.HERO_DEATH_RIGHT],\r\n};\r\n\r\nexport class HeroPlacement extends Placement {\r\n  controllerMoveRequested(direction) {\r\n    //Attempt to start moving\r\n    if (this.movingPixelsRemaining > 0) {\r\n      return;\r\n    }\r\n\r\n    // Check for lock at next position\r\n    const possibleLock = this.getLockAtNextPosition(direction);\r\n    if (possibleLock) {\r\n      possibleLock.unlock();\r\n      return;\r\n    }\r\n\r\n    //Make sure the next space is available\r\n    if (this.isSolidAtNextPosition(direction)) {\r\n      return;\r\n    }\r\n\r\n    // Maybe hop out of non-normal skin\r\n    const collision = this.getCollisionAtNextPosition(direction);\r\n    if (!collision.withChangesHeroSkin()) {\r\n      this.skin = BODY_SKINS.NORMAL;\r\n    }\r\n\r\n    //Start the move\r\n    this.movingPixelsRemaining = 16;\r\n    this.movingPixelDirection = direction;\r\n    this.updateFacingDirection();\r\n    this.updateWalkFrame();\r\n  }\r\n\r\n  getCollisionAtNextPosition(direction) {\r\n    const { x, y } = directionUpdateMap[direction];\r\n    const nextX = this.x + x;\r\n    const nextY = this.y + y;\r\n    return new Collision(this, this.level, {\r\n      x: nextX,\r\n      y: nextY,\r\n    });\r\n  }\r\n\r\n  getLockAtNextPosition(direction) {\r\n    const collision = this.getCollisionAtNextPosition(direction);\r\n    return collision.withLock();\r\n  }\r\n\r\n  isSolidAtNextPosition(direction) {\r\n    const collision = this.getCollisionAtNextPosition(direction);\r\n    const isOutOfBounds = this.level.isPositionOutOfBounds(\r\n      collision.x,\r\n      collision.y\r\n    );\r\n    if (isOutOfBounds) {\r\n      return true;\r\n    }\r\n    return Boolean(collision.withSolidPlacement());\r\n  }\r\n\r\n  updateFacingDirection() {\r\n    if (\r\n      this.movingPixelDirection === DIRECTION_LEFT ||\r\n      this.movingPixelDirection === DIRECTION_RIGHT\r\n    ) {\r\n      this.spriteFacingDirection = this.movingPixelDirection;\r\n    }\r\n  }\r\n\r\n  updateWalkFrame() {\r\n    this.spriteWalkFrame = this.spriteWalkFrame === 1 ? 0 : 1;\r\n  }\r\n\r\n  tick() {\r\n    this.tickMovingPixelProgress();\r\n  }\r\n\r\n  onDoneMoving() {\r\n    //Update my x/y!\r\n    const { x, y } = directionUpdateMap[this.movingPixelDirection];\r\n    this.x += x;\r\n    this.y += y;\r\n    this.handleCollisions();\r\n  }\r\n\r\n  handleCollisions() {\r\n    // handle collisions!\r\n    const collision = new Collision(this, this.level);\r\n\r\n    this.skin = BODY_SKINS.NORMAL;\r\n    const changesHeroSkin = collision.withChangesHeroSkin();\r\n    if (changesHeroSkin) {\r\n      this.skin = changesHeroSkin.changesHeroSkinOnCollide();\r\n    }\r\n\r\n    const collideThatAddsToInventory = collision.withPlacementAddsToInventory();\r\n    if (collideThatAddsToInventory) {\r\n      collideThatAddsToInventory.collect();\r\n      this.level.addPlacement({\r\n        type: PLACEMENT_TYPE_CELEBRATION,\r\n        x: this.x,\r\n        y: this.y,\r\n      });\r\n    }\r\n\r\n    const takesDamages = collision.withSelfGetsDamaged();\r\n    if (takesDamages) {\r\n      this.level.setDeathOutcome(takesDamages.type);\r\n    }\r\n\r\n    const completesLevel = collision.withCompletesLevel();\r\n    if (completesLevel) {\r\n      this.level.completeLevel();\r\n    }\r\n  }\r\n\r\n  getFrame() {\r\n    //Which frame to show?\r\n    const index = this.spriteFacingDirection === DIRECTION_LEFT ? 0 : 1;\r\n\r\n    // If dead, show the dead skin\r\n    if (this.level.deathOutcome) {\r\n      return heroSkinMap[BODY_SKINS.DEATH][index];\r\n    }\r\n\r\n    //Use correct walking frame per direction\r\n    if (this.movingPixelsRemaining > 0 && this.skin === BODY_SKINS.NORMAL) {\r\n      const walkKey = this.spriteWalkFrame === 0 ? HERO_RUN_1 : HERO_RUN_2;\r\n      return heroSkinMap[walkKey][index];\r\n    }\r\n\r\n    return heroSkinMap[this.skin][index];\r\n  }\r\n\r\n  getYTranslate() {\r\n    // Stand on ground when not moving\r\n    if (this.movingPixelsRemaining === 0 || this.skin !== BODY_SKINS.NORMAL) {\r\n      return 0;\r\n    }\r\n\r\n    //Elevate ramp up or down at beginning/end of movement\r\n    const PIXELS_FROM_END = 2;\r\n    if (\r\n      this.movingPixelsRemaining < PIXELS_FROM_END ||\r\n      this.movingPixelsRemaining > 16 - PIXELS_FROM_END\r\n    ) {\r\n      return -1;\r\n    }\r\n\r\n    // Highest in the middle of the movement\r\n    return -2;\r\n  }\r\n\r\n  tickMovingPixelProgress() {\r\n    if (this.movingPixelsRemaining === 0) {\r\n      return;\r\n    }\r\n    this.movingPixelsRemaining -= this.travelPixelsPerFrame;\r\n    if (this.movingPixelsRemaining <= 0) {\r\n      this.movingPixelsRemaining = 0;\r\n      this.onDoneMoving();\r\n    }\r\n  }\r\n\r\n  zIndex() {\r\n    return this.y * Z_INDEX_LAYER_SIZE + 1;\r\n  }\r\n\r\n  renderComponent() {\r\n    const showShadow = this.skin !== BODY_SKINS.WATER;\r\n    return (\r\n      <Hero\r\n        frameCoord={this.getFrame()}\r\n        yTranslate={this.getYTranslate()}\r\n        showShadow={showShadow}\r\n      />\r\n    );\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}