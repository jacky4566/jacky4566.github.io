{"ast":null,"code":"import { LEVEL_THEMES, PLACEMENT_TYPE_FLOUR, PLACEMENT_TYPE_GOAL, PLACEMENT_TYPE_HERO, PLACEMENT_TYPE_WATER, PLACEMENT_TYPE_WATER_PICKUP } from \"../../helpers/consts\";\nfunction getRandom(odds) {\n  let probability = 1 / odds;\n  return Math.random() < probability;\n}\nfunction isItemExistsAtPosition(placements, x, y) {\n  return placements.some(item => item.x === x && item.y === y);\n}\nexport default function LevelGenerator(level) {\n  /* Add RNG items to level */\n  level.RNG.forEach(item => {\n    for (let y = item.depthStart; y <= item.depthEnd; y++) {\n      for (let x = 1; x <= level.tilesWidth; x++) {\n        /* Check if space is already taken and the odds say we can place */\n        if (!isItemExistsAtPosition(level.placements, x, y) && getRandom(item.odds)) {\n          /* Do random number fill */\n          const newPlacement = {\n            x: x,\n            y: y,\n            type: item.type\n          };\n          level.placements.push(newPlacement);\n        }\n      }\n    }\n  });\n\n  /* Fill with Background */\n  for (let y = item.depthStart; y <= item.depthEnd; y++) {\n    for (let x = 1; x <= level.tilesWidth; x++) {\n      /* Check if space is already taken and the odds say we can place */\n      if (!isItemExistsAtPosition(level.placements, x, y)) if (getRandom(item.odds)) {\n        /* Do random number fill */\n        const newPlacement = {\n          x: x,\n          y: y,\n          type: item.type\n        };\n        level.placements.push(newPlacement);\n      }\n    }\n  }\n  return level.placements;\n}\n_c = LevelGenerator;\nvar _c;\n$RefreshReg$(_c, \"LevelGenerator\");","map":{"version":3,"names":["LEVEL_THEMES","PLACEMENT_TYPE_FLOUR","PLACEMENT_TYPE_GOAL","PLACEMENT_TYPE_HERO","PLACEMENT_TYPE_WATER","PLACEMENT_TYPE_WATER_PICKUP","getRandom","odds","probability","Math","random","isItemExistsAtPosition","placements","x","y","some","item","LevelGenerator","level","RNG","forEach","depthStart","depthEnd","tilesWidth","newPlacement","type","push","_c","$RefreshReg$"],"sources":["C:/GitHub/AthabascaCPSCI/COMP 486/Mineral Mayhem/src/components/level-layout/LevelGenerator.js"],"sourcesContent":["import {\r\n    LEVEL_THEMES,\r\n    PLACEMENT_TYPE_FLOUR,\r\n    PLACEMENT_TYPE_GOAL,\r\n    PLACEMENT_TYPE_HERO,\r\n    PLACEMENT_TYPE_WATER,\r\n    PLACEMENT_TYPE_WATER_PICKUP,\r\n} from \"../../helpers/consts\";\r\n\r\nfunction getRandom(odds) {\r\n    let probability = 1 / odds;\r\n    return Math.random() < probability;\r\n}\r\n\r\nfunction isItemExistsAtPosition(placements, x, y) {\r\n    return placements.some(item => item.x === x && item.y === y);\r\n}\r\n\r\nexport default function LevelGenerator(level) {\r\n    /* Add RNG items to level */\r\n    level.RNG.forEach((item) => {\r\n        for (let y = item.depthStart; y <= item.depthEnd; y++) {\r\n            for (let x = 1; x <= level.tilesWidth; x++) {\r\n                /* Check if space is already taken and the odds say we can place */\r\n                if (!isItemExistsAtPosition(level.placements, x, y) && getRandom(item.odds)) {\r\n                    /* Do random number fill */\r\n                    const newPlacement = { x: x, y: y, type: item.type };\r\n                    level.placements.push(newPlacement);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    /* Fill with Background */\r\n    for (let y = item.depthStart; y <= item.depthEnd; y++) {\r\n        for (let x = 1; x <= level.tilesWidth; x++) {\r\n            /* Check if space is already taken and the odds say we can place */\r\n            if (!isItemExistsAtPosition(level.placements, x, y))\r\n                if (getRandom(item.odds)) {\r\n                    /* Do random number fill */\r\n                    const newPlacement = { x: x, y: y, type: item.type };\r\n                    level.placements.push(newPlacement);\r\n                }\r\n        }\r\n    }\r\n\r\n\r\n    return level.placements;\r\n}"],"mappings":"AAAA,SACIA,YAAY,EACZC,oBAAoB,EACpBC,mBAAmB,EACnBC,mBAAmB,EACnBC,oBAAoB,EACpBC,2BAA2B,QACxB,sBAAsB;AAE7B,SAASC,SAASA,CAACC,IAAI,EAAE;EACrB,IAAIC,WAAW,GAAG,CAAC,GAAGD,IAAI;EAC1B,OAAOE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGF,WAAW;AACtC;AAEA,SAASG,sBAAsBA,CAACC,UAAU,EAAEC,CAAC,EAAEC,CAAC,EAAE;EAC9C,OAAOF,UAAU,CAACG,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,CAAC,KAAKA,CAAC,IAAIG,IAAI,CAACF,CAAC,KAAKA,CAAC,CAAC;AAChE;AAEA,eAAe,SAASG,cAAcA,CAACC,KAAK,EAAE;EAC1C;EACAA,KAAK,CAACC,GAAG,CAACC,OAAO,CAAEJ,IAAI,IAAK;IACxB,KAAK,IAAIF,CAAC,GAAGE,IAAI,CAACK,UAAU,EAAEP,CAAC,IAAIE,IAAI,CAACM,QAAQ,EAAER,CAAC,EAAE,EAAE;MACnD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIK,KAAK,CAACK,UAAU,EAAEV,CAAC,EAAE,EAAE;QACxC;QACA,IAAI,CAACF,sBAAsB,CAACO,KAAK,CAACN,UAAU,EAAEC,CAAC,EAAEC,CAAC,CAAC,IAAIR,SAAS,CAACU,IAAI,CAACT,IAAI,CAAC,EAAE;UACzE;UACA,MAAMiB,YAAY,GAAG;YAAEX,CAAC,EAAEA,CAAC;YAAEC,CAAC,EAAEA,CAAC;YAAEW,IAAI,EAAET,IAAI,CAACS;UAAK,CAAC;UACpDP,KAAK,CAACN,UAAU,CAACc,IAAI,CAACF,YAAY,CAAC;QACvC;MACJ;IACJ;EACJ,CAAC,CAAC;;EAEF;EACA,KAAK,IAAIV,CAAC,GAAGE,IAAI,CAACK,UAAU,EAAEP,CAAC,IAAIE,IAAI,CAACM,QAAQ,EAAER,CAAC,EAAE,EAAE;IACnD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIK,KAAK,CAACK,UAAU,EAAEV,CAAC,EAAE,EAAE;MACxC;MACA,IAAI,CAACF,sBAAsB,CAACO,KAAK,CAACN,UAAU,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAC/C,IAAIR,SAAS,CAACU,IAAI,CAACT,IAAI,CAAC,EAAE;QACtB;QACA,MAAMiB,YAAY,GAAG;UAAEX,CAAC,EAAEA,CAAC;UAAEC,CAAC,EAAEA,CAAC;UAAEW,IAAI,EAAET,IAAI,CAACS;QAAK,CAAC;QACpDP,KAAK,CAACN,UAAU,CAACc,IAAI,CAACF,YAAY,CAAC;MACvC;IACR;EACJ;EAGA,OAAON,KAAK,CAACN,UAAU;AAC3B;AAACe,EAAA,GA9BuBV,cAAc;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}